(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _viewManager = require('./viewManager');

var _viewManager2 = _interopRequireDefault(_viewManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var viewmanager = new _viewManager2.default();

},{"./viewManager":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ViewManager = function ViewManager() {
  _classCallCheck(this, ViewManager);

  //initialize variables
  var vessel = void 0;
  var outputNumber = void 0;
  var vesselOptions = void 0;
  var currentOutput = 1;
  var check = "";
  var well_24 = [];
  var well_96 = [];
  var well_384 = [];
  var counter = 0;
  var letters = ["A", "B", "C", "D", "E", "F", "G", "H"];

  well_24[0] = 1;
  for (var i = 1; i < 384; i++) {
    well_24[i] = i + 1;
  };

  well_96[0] = 1;
  for (var i = 1; i < 96; i++) {
    well_96[i] = i + 1;
  };
  console.log(well_96);

  well_384[0] = 1;
  for (var i = 1; i < 384; i++) {
    well_384[i] = i + 1;
  }

  //methods
  function ab2str(buf) {
    return String.fromCharCode.apply(null, new Uint8Array(buf));
  };

  function str2ab_newline(str) {
    str = str + '\n';
    var buf = new ArrayBuffer(str.length); // 2 bytes for each char
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
      bufView[i] = str.charCodeAt(i);
    };
    return buf;
  };

  function str2ab(str) {
    var buf = new ArrayBuffer(str.length); // 2 bytes for each char
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
      bufView[i] = str.charCodeAt(i);
    };
    return buf;
  };

  function checkString(str) {
    var regex_1 = /\d+\s/;
    var regex_2 = /\d+/;
    if (str.search(regex_1, str) == 0) {
      str = str.replace(regex_1, "");
      while (str.search(regex_1, str) == 0) {
        str = str.replace(regex_1, "");
      };
      if (str.search(regex_2, str) == 0) {
        document.getElementById("openSyringe").style.borderColor = "green";
        document.getElementById("openSyringe").style.borderWidth = "0.15rem";
        return true;
      } else {
        document.getElementById("openSyringe").style.borderColor = "red";
        document.getElementById("openSyringe").style.borderWidth = "0.15rem";
        return false;
      }
    } else {
      document.getElementById("openSyringe").style.borderColor = "red";
      document.getElementById("openSyringe").style.borderWidth = "0.15rem";
      return false;
    };
  };

  //buttons
  this.inputButton = document.getElementById("inputButton");
  this.nextButton = document.getElementById("configureButton");
  this.submitButton = document.getElementById("submitProtocol");
  this.openButton = document.getElementById("openEnter");
  this.closeButton = document.getElementById("closeEnter");
  this.durationButton = document.getElementById("durationEnter");

  //event handlers
  this.inputButton.addEventListener('click', function (event) {
    document.getElementById('currentOutput').innerHTML = currentOutput;
    vessel = document.getElementById('selectVessel').value;
    outputNumber = document.getElementById('outputNumber').value;

    //create table for output vessel image
    //create 24-well plate
    if (vessel == 24) {
      var thead_insert = "<th scope='col'> </th>";
      for (var i = 1; i < 7; i++) {
        thead_insert += "<th scope='col'>" + i + "</th>";
      };
      thead_insert += "</tr>";

      var tbody_insert = "";
      var _letters = ["A", "B", "C", "D"];
      for (var i = 0; i < 4; i++) {
        tbody_insert += "<tr>";
        tbody_insert += "<th scope='row'>" + _letters[i] + "</th>";
        for (var j = 1; j < 7; j++) {
          var coordinate = _letters[i] + j;
          tbody_insert += "<td><button type='button' class='btn btn-primary btn-sm' onclick='appendXY(this)' value='" + j + "' id='" + coordinate + "'>" + coordinate + "</button></td>";
        };
        tbody_insert += "</tr>";
      };
      document.getElementById('tbody_insert').innerHTML = tbody_insert;
      document.getElementById('thead_insert').innerHTML = thead_insert;
      counter = 0;
      for (var i = 0; i < 4; i++) {
        for (var j = 1; j < 7; j++) {
          var identifier = _letters[i] + j;
          document.getElementById(identifier).value = well_24[counter];
          counter = counter + 1;
        }
      }
    };

    //create 96-well plate
    if (vessel == 96) {
      var _thead_insert = "<th scope='col'> </th>";
      for (var i = 1; i < 13; i++) {
        _thead_insert += "<th scope='col'>" + i + "</th>";
      };
      _thead_insert += "</tr>";

      var _tbody_insert = "";
      var _letters2 = ["A", "B", "C", "D", "E", "F", "G", "H"];

      for (var i = 0; i < 8; i++) {
        _tbody_insert += "<tr>";
        _tbody_insert += "<th scope='row'>" + _letters2[i] + "</th>";
        for (var j = 1; j < 13; j++) {
          var _coordinate = _letters2[i] + j;
          _tbody_insert += "<td><button type='button' class='btn btn-primary btn-sm' onclick='appendXY(this)' value='" + _coordinate + "' id='" + _coordinate + "'>" + _coordinate + "</button></td>";
        };
        _tbody_insert += "</tr>";
      };
      document.getElementById('tbody_insert').innerHTML = _tbody_insert;
      document.getElementById('thead_insert').innerHTML = _thead_insert;
      counter = 0;
      for (var i = 0; i < 7; i++) {
        for (var j = 1; j < 13; j++) {
          var _identifier = _letters2[i] + j;
          document.getElementById(_identifier).value = well_96[counter];
          counter = counter + 1;
        }
      }
    };

    //create 384-well plate
    if (vessel == 384) {
      var _thead_insert2 = "<th scope='col'> </th>";
      for (var i = 1; i < 25; i++) {
        _thead_insert2 += "<th scope='col'>" + i + "</th>";
      };
      _thead_insert2 += "</tr>";

      var _tbody_insert2 = "";
      var _letters3 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P"];
      for (var i = 0; i < 15; i++) {
        _tbody_insert2 += "<tr>";
        _tbody_insert2 += "<th scope='row'>" + _letters3[i] + "</th>";
        for (var j = 1; j < 25; j++) {
          var _coordinate2 = _letters3[i] + j;
          _tbody_insert2 += "<td><button type='button' class='btn btn-primary btn-sm' onclick='appendXY(this)' value='" + _coordinate2 + "' id='" + _coordinate2 + "'>" + _coordinate2 + "</button></td>";
        };
        _tbody_insert2 += "</tr>";
      };
      document.getElementById('tbody_insert').innerHTML = _tbody_insert2;
      document.getElementById('thead_insert').innerHTML = _thead_insert2;
    };
    socket.emit("send-raw", {
      "name": '/dev/cu.usbmodem1411',
      "payload": str2ab_newline(outputNumber)
    });
  });

  this.nextButton.addEventListener('click', function (event) {
    if (currentOutput < outputNumber) {
      currentOutput = currentOutput + 1;
      document.getElementById('currentOutput').innerHTML = currentOutput;
    } else if (currentOutput == outputNumber - 1) {
      currentOutput = outputNumber;
      document.getElementById('currentOutput').innerHTML = currentOutput;
    };
    console.log(xy);
    socket.emit("send-raw", {
      "name": '/dev/cu.usbmodem1411',
      "payload": str2ab(xy)
    });
  });

  this.openButton.addEventListener('click', function (event) {
    var data = document.getElementById('openSyringe').value;
    if (checkString(data)) {
      socket.emit("send-raw", {
        "name": '/dev/cu.usbmodem1411',
        "payload": str2ab(data)
      });
    } else {
      console.log("Try again");
    }
  });

  this.closeButton.addEventListener('click', function (event) {
    var data = document.getElementById('closeSyringe').value;
    checkString(data);
    if (checkString(data)) {
      socket.emit("send-raw", {
        "name": '/dev/cu.usbmodem1411',
        "payload": str2ab(data)
      });
    } else {
      console.log("Try again");
    }
  });
};

exports.default = ViewManager;
;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
